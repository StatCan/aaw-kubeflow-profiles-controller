/*
The MIT License (MIT)

Copyright Â© 2020 Her Majesty the Queen in Right of Canada, as represented by the Minister of Statistics Canada

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/StatCan/profiles-controller/pkg/apis/kubeflow/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotebookLister helps list Notebooks.
// All objects returned here must be treated as read-only.
type NotebookLister interface {
	// List lists all Notebooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Notebook, err error)
	// Notebooks returns an object that can list and get Notebooks.
	Notebooks(namespace string) NotebookNamespaceLister
	NotebookListerExpansion
}

// notebookLister implements the NotebookLister interface.
type notebookLister struct {
	indexer cache.Indexer
}

// NewNotebookLister returns a new NotebookLister.
func NewNotebookLister(indexer cache.Indexer) NotebookLister {
	return &notebookLister{indexer: indexer}
}

// List lists all Notebooks in the indexer.
func (s *notebookLister) List(selector labels.Selector) (ret []*v1.Notebook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Notebook))
	})
	return ret, err
}

// Notebooks returns an object that can list and get Notebooks.
func (s *notebookLister) Notebooks(namespace string) NotebookNamespaceLister {
	return notebookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotebookNamespaceLister helps list and get Notebooks.
// All objects returned here must be treated as read-only.
type NotebookNamespaceLister interface {
	// List lists all Notebooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Notebook, err error)
	// Get retrieves the Notebook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Notebook, error)
	NotebookNamespaceListerExpansion
}

// notebookNamespaceLister implements the NotebookNamespaceLister
// interface.
type notebookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Notebooks in the indexer for a given namespace.
func (s notebookNamespaceLister) List(selector labels.Selector) (ret []*v1.Notebook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Notebook))
	})
	return ret, err
}

// Get retrieves the Notebook from the indexer for a given namespace and name.
func (s notebookNamespaceLister) Get(name string) (*v1.Notebook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("notebook"), name)
	}
	return obj.(*v1.Notebook), nil
}
